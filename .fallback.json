{
    "commands": [
        {
            "command": "/usr/sbin/blkid -c /dev/null",
            "pattern": []
        },
        {
            "command": "/usr/sbin/brctl show",
            "pattern": []
        },
        {
            "command": "/usr/bin/ceph daemon  config show",
            "pattern": [],
            "pre_command": "ceph_socket_files"
        },
        {
            "command": "/usr/bin/ceph health detail -f json-pretty",
            "pattern": []
        },
        {
            "command": "/usr/bin/ceph osd dump -f json-pretty",
            "pattern": []
        },
        {
            "command": "/usr/bin/ceph osd erasure-code-profile get  -f json-pretty",
            "pattern": [],
            "pre_command": "ceph_osd_ec_profile_ls"
        },
        {
            "command": "/usr/bin/ceph osd tree -f json-pretty",
            "pattern": []
        },
        {
            "command": "/usr/bin/ceph -s -f json-pretty",
            "pattern": []
        },
        {
            "command": "/usr/bin/ceph -v",
            "pattern": []
        },
        {
            "command": "/usr/bin/find /etc/origin/node /etc/origin/master /etc/pki -type f -exec /usr/bin/openssl x509 -noout -enddate -in '{}' \\; -exec echo 'FileName= {}' \\;",
            "pattern": []
        },
        {
            "command": "/sbin/chkconfig --list",
            "pattern": []
        },
        {
            "command": "/usr/bin/chronyc sources",
            "pattern": []
        },
        {
            "command": "/bin/date",
            "pattern": []
        },
        {
            "command": "/bin/date --utc",
            "pattern": []
        },
        {
            "command": "/sbin/dcbtool gc  dcb",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/bin/df -al",
            "pattern": []
        },
        {
            "command": "/bin/df -alP",
            "pattern": []
        },
        {
            "command": "/bin/df -li",
            "pattern": []
        },
        {
            "command": "/usr/bin/dig +dnssec . DNSKEY",
            "pattern": [
                "ANSWER SECTION",
                "DNSKEY",
                "RRSIG"
            ]
        },
        {
            "command": "/bin/dmesg",
            "pattern": [
                "CSUM",
                "CVE-2017-1000364",
                "Dropping TSO",
                "HP HPSA",
                "Linux version",
                "NUMA: ",
                "P220i",
                "P420i",
                "WRITE SAME failed. Manually zeroing",
                "blocked FC remote port time out",
                "crashkernel reservation failed",
                "crashkernel=auto resulted in zero bytes of reserved memory",
                "ixgbevf: Unknown parameter `InterruptThrottleRate'",
                "vpd r/w failed"
            ]
        },
        {
            "command": "/usr/sbin/dmidecode",
            "pattern": []
        },
        {
            "command": "/usr/bin/docker inspect --type=container",
            "pattern": [],
            "pre_command": "docker_containers"
        },
        {
            "command": "/usr/bin/docker inspect --type=image",
            "pattern": [],
            "pre_command": "docker_images"
        },
        {
            "command": "/usr/bin/docker info",
            "pattern": []
        },
        {
            "command": "/usr/bin/docker ps --all --no-trunc",
            "pattern": []
        },
        {
            "command": "/usr/bin/docker images --all --no-trunc --digests",
            "pattern": []
        },
        {
            "command": "/sbin/dumpe2fs -h",
            "pattern": [],
            "pre_command": "dumpdev"
        },
        {
            "command": "/sbin/ethtool",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/sbin/ethtool -S",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/sbin/ethtool -g",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/sbin/ethtool -i",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/sbin/ethtool -k",
            "pattern": [],
            "pre_command": "iface"
        },
        {
            "command": "/usr/bin/facter",
            "pattern": []
        },
        {
            "command": "/usr/sbin/getenforce",
            "pattern": []
        },
        {
            "command": "/bin/ls -l /boot/grub/grub.conf",
            "pattern": []
        },
        {
            "command": "/bin/ls -l /boot/grub2/grub.cfg",
            "pattern": []
        },
        {
            "command": "/usr/bin/crontab -l -u heat",
            "pattern": [
                "heat-manage"
            ]
        },
        {
            "command": "/bin/hostname",
            "pattern": []
        },
        {
            "command": "/usr/sbin/httpd -V",
            "pattern": []
        },
        {
            "command": "/bin/rpm -qa --qf='%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\t%{INSTALLTIME:date}\t%{BUILDTIME}\t%{RSAHEADER:pgpsig}\t%{DSAHEADER:pgpsig}\n'",
            "pattern": []
        },
        {
            "command": "/sbin/ip addr",
            "pattern": []
        },
        {
            "command": "/sbin/ip route show table all",
            "pattern": []
        },
        {
            "command": "/usr/bin/ipcs -s",
            "pattern": []
        },
        {
            "command": "/usr/bin/ipcs -s -i",
            "pattern": [],
            "pre_command": "semid"
        },
        {
            "command": "/sbin/iptables-save",
            "pattern": []
        },
        {
            "command": "/sbin/ip -4 neighbor show nud all",
            "pattern": []
        },
        {
            "command": "/sbin/ip -6 neighbor show nud all",
            "pattern": []
        },
        {
            "command": "/usr/bin/crontab -l -u keystone",
            "pattern": [
                "heat-manage",
                "keystone-manage"
            ]
        },
        {
            "command": "/usr/bin/file -L /etc/localtime",
            "pattern": []
        },
        {
            "command": "/usr/bin/lpstat -p",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /boot",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /dev",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /dev/disk",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /var/lib/docker/volumes",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /etc",
            "pattern": []
        },
        {
            "command": "/bin/ls -lanR /sys/firmware",
            "pattern": []
        },
        {
            "command": "/bin/ls -la /var/log /var/log/audit",
            "pattern": []
        },
        {
            "command": "/bin/lsblk",
            "pattern": []
        },
        {
            "command": "/bin/lsblk -P -o NAME,KNAME,MAJ:MIN,FSTYPE,MOUNTPOINT,LABEL,UUID,RA,RO,RM,MODEL,SIZE,STATE,OWNER,GROUP,MODE,ALIGNMENT,MIN-IO,OPT-IO,PHY-SEC,LOG-SEC,ROTA,SCHED,RQ-SIZE,TYPE,DISC-ALN,DISC-GRAN,DISC-MAX,DISC-ZERO",
            "pattern": []
        },
        {
            "command": "/sbin/lsmod",
            "pattern": []
        },
        {
            "command": "/usr/sbin/lsof",
            "pattern": [
                "COMMAND",
                "libcrypto",
                "libssl",
                "libssl.so",
                "lsnrctl",
                "oracle",
                "tnslsnr"
            ]
        },
        {
            "command": "/sbin/lspci",
            "pattern": []
        },
        {
            "command": "/sbin/lvs --nameprefixes --noheadings --separator='|' -a -o lv_all --config=\"global{locking_type=0}\"",
            "pattern": []
        },
        {
            "command": "/usr/bin/find /sys/bus/pci/devices/*/mlx4_port[0-9] -print -exec cat {} \\;",
            "pattern": []
        },
        {
            "command": "/bin/mount",
            "pattern": []
        },
        {
            "command": "/usr/bin/find /sys/devices/virtual/net/ -name multicast_querier -print -exec cat {} \\;",
            "pattern": []
        },
        {
            "command": "/sbin/multipath -v4 -ll",
            "pattern": []
        },
        {
            "command": "/usr/sbin/named-checkconf -p",
            "pattern": [
                "DNSSEC-ENABLE",
                "Dnssec-Enable",
                "dnssec-enable"
            ]
        },
        {
            "command": "/bin/netstat -neopa",
            "pattern": []
        },
        {
            "command": "/bin/netstat -i",
            "pattern": []
        },
        {
            "command": "/bin/netstat -s",
            "pattern": []
        },
        {
            "command": "/bin/netstat -agn",
            "pattern": []
        },
        {
            "command": "/usr/sbin/ntpq -c 'rv 0 leap'",
            "pattern": []
        },
        {
            "command": "/usr/sbin/ntpq -pn",
            "pattern": []
        },
        {
            "command": "/usr/sbin/ntptime",
            "pattern": []
        },
        {
            "command": "/usr/bin/ovs-vsctl show",
            "pattern": []
        },
        {
            "command": "/bin/ps aux",
            "pattern": [
                "/sapmnt/",
                "/usr/bin/docker",
                "/usr/bin/docker daemon",
                "/usr/bin/docker-current",
                "/usr/bin/docker-current daemon",
                "/usr/bin/dockerd-current",
                "/usr/bin/openshift start master",
                "/usr/bin/openshift start node",
                "/usr/bin/postgres",
                "/usr/bin/postmaster",
                "/usr/sap/",
                "COMMAND",
                "STAP",
                "STAP/8.2",
                "ceph-osd",
                "chronyd",
                "keystone-all",
                "ntpd",
                "phc2sys",
                "postgres",
                "postmaster",
                "ptp4l"
            ]
        },
        {
            "command": "/bin/ps auxcww",
            "pattern": []
        },
        {
            "command": "/sbin/pvs --nameprefixes --noheadings --separator='|' -a -o pv_all,vg_name --config=\"global{locking_type=0}\"",
            "pattern": []
        },
        {
            "command": "/usr/sbin/rabbitmqctl list_queues name messages consumers auto_delete",
            "pattern": []
        },
        {
            "command": "/usr/sbin/rabbitmqctl report",
            "pattern": []
        },
        {
            "command": "/usr/sbin/rabbitmqctl list_users",
            "pattern": []
        },
        {
            "command": "/usr/bin/crontab -l -u root",
            "pattern": [
                "heat-manage"
            ]
        },
        {
            "command": "/bin/rpm -V coreutils procps procps-ng shadow-utils passwd sudo",
            "pattern": []
        },
        {
            "command": "/usr/sbin/sestatus -b",
            "pattern": []
        },
        {
            "command": "/usr/sbin/ss -tulpn",
            "pattern": []
        },
        {
            "command": "/bin/ls -l /etc/ssh/sshd_config",
            "pattern": []
        },
        {
            "command": "/sbin/sysctl -a",
            "pattern": []
        },
        {
            "command": "/bin/lsinitrd /boot/initramfs-kdump.img -f /etc/sysctl.conf /etc/sysctl.d/*.conf",
            "pattern": [],
            "pre_command": "uname_r"
        },
        {
            "command": "/bin/systemctl show openstack-cinder-volume",
            "pattern": []
        },
        {
            "command": "/bin/systemctl list-unit-files",
            "pattern": []
        },
        {
            "command": "/bin/systemctl list-units",
            "pattern": []
        },
        {
            "command": "/bin/systemctl show mariadb",
            "pattern": []
        },
        {
            "command": "/sbin/tuned-adm list",
            "pattern": []
        },
        {
            "command": "/bin/uname -a",
            "pattern": []
        },
        {
            "command": "/usr/bin/uptime",
            "pattern": []
        },
        {
            "command": "/sbin/vgdisplay -vv",
            "pattern": []
        },
        {
            "command": "/sbin/vgs --nameprefixes --noheadings --separator='|' -a -o vg_all --config=\"global{locking_type=0}\"",
            "pattern": []
        },
        {
            "command": "/usr/sbin/virt-what",
            "pattern": []
        },
        {
            "command": "/usr/bin/find /var/crash /var/tmp -path '*.reports-*/whoopsie-report'",
            "pattern": []
        },
        {
            "command": "/usr/bin/yum -C repolist",
            "pattern": []
        }
    ],
    "files": [
        {
            "file": "/etc/redhat-access-insights/machine-id",
            "pattern": []
        },
        {
            "file": "/etc/redhat_access_proactive/machine-id",
            "pattern": []
        },
        {
            "file": "/etc/audit/auditd.conf",
            "pattern": []
        },
        {
            "file": "/proc/net/bonding/()*bond.*",
            "pattern": []
        },
        {
            "file": "/var/log/tomcat.*/()*catalina\\.out",
            "pattern": [
                "APPARENT DEADLOCK!"
            ]
        },
        {
            "file": "/proc/driver/cciss/()*cciss.*",
            "pattern": []
        },
        {
            "file": "/etc/ceilometer/ceilometer.conf",
            "pattern": []
        },
        {
            "file": "/var/log/ceph/()*ceph-osd.*\\.log$",
            "pattern": [
                "Thread.cc"
            ]
        },
        {
            "file": "/etc/chrony.conf",
            "pattern": []
        },
        {
            "file": "/var/lib/pacemaker/cib/cib.xml",
            "pattern": []
        },
        {
            "file": "/etc/cinder/cinder.conf",
            "pattern": []
        },
        {
            "file": "/var/log/cinder/volume.log",
            "pattern": [
                "Image cloning unsuccessful for image",
                "Message: NFS file could not be discovered.",
                "[Errno 24] Too many open files"
            ]
        },
        {
            "file": "/etc/cluster/cluster.conf",
            "pattern": [
                "<lvm",
                "clusternode name="
            ]
        },
        {
            "file": "/proc/cmdline",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/corosync",
            "pattern": []
        },
        {
            "file": "/proc/cpuinfo",
            "pattern": []
        },
        {
            "file": "/sys/devices/system/clocksource/clocksource0/current_clocksource",
            "pattern": []
        },
        {
            "file": "/etc/redhat-access-insights/machine-id",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/docker-storage-setup",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/docker",
            "pattern": []
        },
        {
            "file": "/var/log/ovirt-engine/engine.log",
            "pattern": [
                "Duplicate ID 'virtio-serial0' for device",
                "Received fatal alert: certificate_expired",
                "XML error: Multiple 'virtio-serial' controllers with index '0'",
                "[org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher]",
                "has paused due to storage I/O problem"
            ]
        },
        {
            "file": "/etc/systemd/()*journald\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/systemd/journald\\.conf\\.d/()*.+\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/fstab",
            "pattern": []
        },
        {
            "file": "/etc/my.cnf.d/galera.cnf",
            "pattern": []
        },
        {
            "file": "/boot/grub/grub.conf",
            "pattern": []
        },
        {
            "file": "/boot/efi/EFI/redhat/grub.cfg",
            "pattern": []
        },
        {
            "file": "/boot/grub2/grub.cfg",
            "pattern": []
        },
        {
            "file": "/etc/haproxy/haproxy.cfg",
            "pattern": []
        },
        {
            "file": "/etc/heat/heat.conf",
            "pattern": []
        },
        {
            "file": "/etc/hosts",
            "pattern": []
        },
        {
            "file": "/etc/httpd/conf/()*httpd\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/httpd/conf\\.d/()*.+\\.conf",
            "pattern": []
        },
        {
            "file": "/var/log/httpd/error_log",
            "pattern": [
                "(28)No space left on device: ",
                "Require ServerLimit > 0, setting to 1",
                "and would exceed the ServerLimit value of ",
                "consider raising the MaxClients setting",
                "consider raising the MaxRequestWorkers setting",
                "exceed ServerLimit of",
                "exceeds ServerLimit value of",
                "exceeds compile time limit of",
                "exceeds compile-time limit of",
                "not allowed, increasing to 1"
            ]
        },
        {
            "file": "/etc/sysconfig/network-scripts/()*ifcfg-.*",
            "pattern": []
        },
        {
            "file": "/etc/ImageMagick/()*policy\\.xml",
            "pattern": [
                "</policymap>",
                "<policy",
                "<policymap>"
            ]
        },
        {
            "file": "/usr/lib64/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
            "pattern": [
                "</policymap>",
                "<policy",
                "<policymap>"
            ]
        },
        {
            "file": "/usr/lib/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
            "pattern": [
                "</policymap>",
                "<policy",
                "<policymap>"
            ]
        },
        {
            "file": "/proc/interrupts",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/iptables",
            "pattern": []
        },
        {
            "file": "/etc/kdump.conf",
            "pattern": []
        },
        {
            "file": "/sys/kernel/kexec_crash_size",
            "pattern": []
        },
        {
            "file": "/sys/kernel/mm/ksm/run",
            "pattern": []
        },
        {
            "file": "/etc/security/()*limits\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/security/limits\\.d/()*.*\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/lvm/lvm.conf",
            "pattern": [
                "auto_activation_volume_list",
                "filter",
                "locking_type",
                "volume_list"
            ]
        },
        {
            "file": "/proc/mdstat",
            "pattern": []
        },
        {
            "file": "/proc/meminfo",
            "pattern": []
        },
        {
            "file": "/var/log/messages",
            "pattern": [
                " disconnect jid=",
                "'Ifcfg' object has no attribute 'runningConfig",
                ": segfault at ",
                ": session replaced: jid=",
                "Abort command issued",
                "DMA Status error.  Resetting chip",
                "Dazed and confused, but trying to continue",
                "Device offlined - not ready after error recovery",
                "Error deleting EBS Disk volume aws",
                "Error running DeviceResume dm_task_run failed",
                "Machine",
                "Neighbour table overflow",
                "Out of MCCQ wrbs",
                "Out of memory: kill process",
                "SCSI device reset on",
                "SDN initialization failed: Error: Existing service with IP: None is not part of service network",
                "SELinux is preventing /usr/sbin/logrotate from getattr access on the file",
                "Sense Key : Illegal Request [current]",
                "Temperature above threshold",
                "Uhhuh. NMI received for unknown reason",
                "Virtualization daemon",
                "WRITE SAME failed. Manually zeroing",
                "be2net",
                "blocked FC remote port time out",
                "does not seem to be present, delaying initialization",
                "ext4_ext_search_left",
                "fiid_obj_get: 'present_countdown_value': data not available",
                "firewalld - dynamic firewall daemon",
                "heated above trip temperature",
                "in libnl.so.1",
                "irq handler for vector (irq -1)",
                "is beyond advertised capabilities",
                "kernel: CIFS VFS: Unexpected SMB signature",
                "kernel: bnx2fc: byte_count",
                "kernel: lockd: Unknown symbol register_inet6addr_notifier",
                "kernel: lockd: Unknown symbol unregister_inet6addr_notifier",
                "kernel: megasas: Found FW in FAULT state,will reset adapter.",
                "khash_super_prune_nolock",
                "megaraid_sas: FW detected to be in faultstate, restarting it",
                "mode:0x20",
                "multipathd.service operation timed out. Terminating",
                "nf_conntrack: expectation table full",
                "nf_conntrack: table full, dropping packet",
                "page allocation failure",
                "per_source_limit from",
                "server kernel: rhsmcertd-worke",
                "skb_copy",
                "skb_over_panic",
                "start request repeated too quickly for docker.service",
                "swapper: page allocation failure",
                "tg3_start_xmit",
                "timeout; kill it",
                "udev: renamed network interface",
                "udevd",
                "vdsm-tool: EnvironmentError: Failed to restore the persisted networks"
            ]
        },
        {
            "file": "/etc/()*modprobe\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/modprobe\\.d/()*.*\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/multipath.conf",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/netconsole",
            "pattern": []
        },
        {
            "file": "/etc/neutron/plugin.ini",
            "pattern": []
        },
        {
            "file": "/var/log/neutron/server.log",
            "pattern": [
                "No tenant network is available for allocation"
            ]
        },
        {
            "file": "/proc/net/netfilter/nfnetlink_queue",
            "pattern": []
        },
        {
            "file": "/etc/exports",
            "pattern": [
                "no_root_squash"
            ]
        },
        {
            "file": "/etc/exports\\.d/()*.*\\.exports",
            "pattern": [
                "no_root_squash"
            ]
        },
        {
            "file": "/var/log/nova/nova-api.log",
            "pattern": [
                "Timed out waiting for a reply to message ID"
            ]
        },
        {
            "file": "/etc/nova/nova.conf",
            "pattern": []
        },
        {
            "file": "/etc/nscd.conf",
            "pattern": [
                "enable-cache"
            ]
        },
        {
            "file": "/etc/nsswitch.conf",
            "pattern": [
                "HOSTS:",
                "Hosts:",
                "hosts:"
            ]
        },
        {
            "file": "/etc/ntp.conf",
            "pattern": []
        },
        {
            "file": "/etc/origin/node/node-config.yaml",
            "pattern": []
        },
        {
            "file": "/etc/ovirt-engine/engine\\.conf\\.d/()*.*",
            "pattern": [
                "ENGINE_TMP="
            ]
        },
        {
            "file": "/var/log/pacemaker.log",
            "pattern": [
                "pcmk_dbus_find_error"
            ]
        },
        {
            "file": "/etc/pam.d/password-auth",
            "pattern": []
        },
        {
            "file": "/etc/yum/pluginconf\\.d/()*\\w+\\.conf",
            "pattern": []
        },
        {
            "file": "/var/lib/pgsql/data/postgresql.conf",
            "pattern": []
        },
        {
            "file": "/var/lib/pgsql/data/pg_log/()*postgresql-.+\\.log",
            "pattern": [
                "ERROR:",
                "checkpoints are occurring too frequently"
            ]
        },
        {
            "file": "/sos_commands/process/ps_auxwww",
            "pattern": []
        },
        {
            "file": "/var/log/rabbitmq/startup_log",
            "pattern": [
                "Event crashed log handler:"
            ]
        },
        {
            "file": "/etc/rc.d/rc.local",
            "pattern": []
        },
        {
            "file": "/etc/redhat-release",
            "pattern": []
        },
        {
            "file": "/etc/resolv.conf",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/rhn/()*rhn-entitlement-cert\\.xml.*",
            "pattern": []
        },
        {
            "file": "/etc/rhn/rhn.conf",
            "pattern": []
        },
        {
            "file": "/usr/share/rhn/config-defaults/rhn_hibernate.conf",
            "pattern": []
        },
        {
            "file": "/var/log/rhn/search/rhn_search_daemon.log",
            "pattern": [
                "APPARENT DEADLOCK!"
            ]
        },
        {
            "file": "/var/log/rhn/rhn_taskomatic_daemon.log",
            "pattern": []
        },
        {
            "file": "/etc/rhsm/rhsm.conf",
            "pattern": []
        },
        {
            "file": "/etc/rsyslog.conf",
            "pattern": [
                "imtcp",
                "regex"
            ]
        },
        {
            "file": "/etc/samba/smb.conf",
            "pattern": [
                "GLOBAL",
                "Global",
                "MAX SMBD PROCESSES",
                "Max Smbd Processes",
                "NT PIPE SUPPORT",
                "Nt Pipe Support",
                "REALM",
                "Realm",
                "SECURITY",
                "Security",
                "[",
                "global",
                "max smbd processes",
                "nt pipe support",
                "realm",
                "security"
            ]
        },
        {
            "file": "/usr/share/foreman/lib/satellite/version.rb",
            "pattern": []
        },
        {
            "file": "/proc/scsi/scsi",
            "pattern": []
        },
        {
            "file": "/var/log/secure",
            "pattern": [
                "error: session_pty_req: session"
            ]
        },
        {
            "file": "/etc/selinux/config",
            "pattern": []
        },
        {
            "file": "/etc/ssh/sshd_config",
            "pattern": [
                "ALLOWUSERS",
                "AllowUsers",
                "Allowusers",
                "CHALLENGERESPONSEAUTHENTICATION",
                "CIPHERS",
                "CLIENTALIVECOUNTMAX",
                "CLIENTALIVEINTERVAL",
                "ChallengeResponseAuthentication",
                "Challengeresponseauthentication",
                "Ciphers",
                "ClientAliveCountMax",
                "ClientAliveInterval",
                "Clientalivecountmax",
                "Clientaliveinterval",
                "DENYUSERS",
                "DenyUsers",
                "Denyusers",
                "KBDINTERACTIVEAUTHENTICATION",
                "KbdInteractiveAuthentication",
                "Kbdinteractiveauthentication",
                "LOGINGRACETIME",
                "LoginGraceTime",
                "Logingracetime",
                "MACS",
                "MACs",
                "MAXAUTHTRIES",
                "MAXSTARTUPS",
                "Macs",
                "MaxAuthTries",
                "MaxStartups",
                "Maxauthtries",
                "Maxstartups",
                "PERMITEMPTYPASSWORDS",
                "PERMITROOTLOGIN",
                "PROTOCOL",
                "PermitEmptyPasswords",
                "PermitRootLogin",
                "Permitemptypasswords",
                "Permitrootlogin",
                "Protocol",
                "USEPAM",
                "UsePAM",
                "UsePam",
                "Usepam",
                "allowusers",
                "challengeresponseauthentication",
                "ciphers",
                "clientalivecountmax",
                "clientaliveinterval",
                "denyusers",
                "kbdinteractiveauthentication",
                "logingracetime",
                "macs",
                "maxauthtries",
                "maxstartups",
                "permitemptypasswords",
                "permitrootlogin",
                "protocol",
                "usepam"
            ]
        },
        {
            "file": "/etc/sysconfig/ntpd",
            "pattern": []
        },
        {
            "file": "/etc/sysctl.conf",
            "pattern": []
        },
        {
            "file": "/usr/lib/systemd/system/docker.service",
            "pattern": []
        },
        {
            "file": "/usr/lib/systemd/system/atomic-openshift-node.service",
            "pattern": []
        },
        {
            "file": "/etc/systemd/system.conf",
            "pattern": []
        },
        {
            "file": "/etc/sysconfig/rhn/up2date",
            "pattern": []
        },
        {
            "file": "/usr/lib/systemd/journald\\.conf\\.d/()*.+\\.conf",
            "pattern": []
        },
        {
            "file": "/etc/vdsm/vdsm.conf",
            "pattern": []
        },
        {
            "file": "/var/log/vdsm/vdsm.log",
            "pattern": [
                "(waitForMigrationDestinationPrepare)",
                "16514': No route to host",
                "ImageIsNotLegalChain: Image is not a legal chain:",
                "ImagePathError: Image path does not exist or cannot be accessed/created:",
                "Migration is stuck: Hasn't progressed in",
                "The name org.fedoraproject.FirewallD1 was not provided by any .service files",
                "Timeout while waiting for path preparation",
                "Unable to obtain correct plug status or plug is not available"
            ]
        },
        {
            "file": "/etc/vdsm/vdsm.id",
            "pattern": []
        },
        {
            "file": "/etc/pam.d/vsftpd",
            "pattern": []
        },
        {
            "file": "/etc/vsftpd/vsftpd.conf",
            "pattern": [
                "LOCAL_ENABLE",
                "Local_Enable",
                "SSL_ENABLE",
                "SSL_SSLV3",
                "Ssl_Enable",
                "Ssl_Sslv3",
                "local_enable",
                "ssl_enable",
                "ssl_sslv3"
            ]
        },
        {
            "file": "/etc/xinetd.conf",
            "pattern": []
        },
        {
            "file": "/etc/xinetd\\.d/()*.*",
            "pattern": []
        },
        {
            "file": "/etc/yum.conf",
            "pattern": []
        },
        {
            "file": "/etc/yum\\.repos\\.d/()*.*\\.repo",
            "pattern": []
        },
        {
            "file": "/var/log/redhat-access-insights/redhat-access-insights.log",
            "pattern": []
        },
        {
            "file": "/var/log/redhat_access_proactive/redhat_access_proactive.log",
            "pattern": []
        }
    ],
    "meta_specs": {
        "branch_info": {
            "archive_file_name": "/branch_info"
        },
        "uploader_log": {
            "archive_file_name": "/var/log/insights-client/insights-client.log"
        }
    },
    "openshift": [
        {
            "command": "/usr/bin/oc get pod -o yaml --all-namespaces",
            "pattern": []
        },
        {
            "command": "/usr/bin/oc get project -o yaml --all-namespaces",
            "pattern": []
        },
        {
            "command": "/usr/bin/oc get pv -o yaml --all-namespaces",
            "pattern": []
        },
        {
            "command": "/usr/bin/oc get role -o yaml --all-namespaces",
            "pattern": []
        },
        {
            "command": "/usr/bin/oc get rolebinding -o yaml --all-namespaces",
            "pattern": []
        },
        {
            "command": "/usr/bin/oc get service -o yaml --all-namespaces",
            "pattern": []
        }
    ],
    "pre_commands": {
        "block": "/bin/ls /sys/block | awk '!/^ram|^\\.+$/ {print \"/dev/\" $1 \" unit s print\"}'",
        "ceph_osd_ec_profile_ls ": "/usr/bin/ceph osd erasure-code-profile ls",
        "ceph_socket_files": "/bin/ls /var/run/ceph/ceph-*.*.asok",
        "docker_containers": "/usr/bin/docker ps -aq",
        "docker_images": "/usr/bin/docker images -q",
        "dumpdev": "/bin/awk '/ext[234]/ { print $1; }' /proc/mounts",
        "getblockschedulers": "for device in $(ls /sys/block); do echo /sys/block/$device/queue/scheduler; done",
        "iface": "/sbin/ip -o link | awk -F ': ' '/.*link\\/ether/ {print $2}'",
        "md5chk_files": "/bin/ls -H /usr/lib*/{libfreeblpriv3.so,libsoftokn3.so} /etc/pki/product*/69.pem /dev/null 2>/dev/null",
        "module": "/bin/ls /sys/module",
        "semid": "/usr/bin/ipcs -s | awk '{if (NF == 5 && $2 ~ /^[0-9]+$/) print $2}'",
        "uname_r": "/bin/uname -r"
    },
    "specs": {
        "auditd.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/audit/auditd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/audit/auditd.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/audit/auditd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/audit/auditd.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/audit/auditd.conf",
                    "file": "/etc/audit/auditd.conf",
                    "pattern": []
                }
            ]
        },
        "blkid": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/blkid_-c_.dev.null",
                    "command": "/usr/sbin/blkid -c /dev/null",
                    "pattern": []
                }
            ]
        },
        "bond": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/net/bonding/()*bond.*",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/proc/net/bonding/()*bond.*",
                    "pattern": []
                }
            ]
        },
        "brctl_show": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/brctl_show",
                    "command": "/usr/sbin/brctl show",
                    "pattern": []
                }
            ]
        },
        "catalina.out": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/tomcat.*/()*catalina\\.out",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/tomcat.*/()*catalina\\.out",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/var/log/tomcat.*/()*catalina\\.out",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ]
        },
        "cciss": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/driver/cciss/()*cciss.*",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/proc/driver/cciss/()*cciss.*",
                    "pattern": []
                }
            ]
        },
        "ceilometer.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/ceilometer/ceilometer.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ceilometer/ceilometer.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/ceilometer/ceilometer.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ceilometer/ceilometer.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/ceilometer/ceilometer.conf",
                    "file": "/etc/ceilometer/ceilometer.conf",
                    "pattern": []
                }
            ]
        },
        "ceph_config_show": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_daemon__config_show",
                    "command": "/usr/bin/ceph daemon  config show",
                    "pattern": [],
                    "pre_command": "ceph_socket_files"
                }
            ]
        },
        "ceph_health_detail": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_health_detail_-f_json-pretty",
                    "command": "/usr/bin/ceph health detail -f json-pretty",
                    "pattern": []
                }
            ]
        },
        "ceph_osd.log": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/ceph/()*ceph-osd.*\\.log$",
                    "pattern": [
                        "Thread.cc"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/ceph/()*ceph-osd.*\\.log$",
                    "pattern": [
                        "Thread.cc"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/var/log/ceph/()*ceph-osd.*\\.log$",
                    "pattern": [
                        "Thread.cc"
                    ]
                }
            ]
        },
        "ceph_osd_dump": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_osd_dump_-f_json-pretty",
                    "command": "/usr/bin/ceph osd dump -f json-pretty",
                    "pattern": []
                }
            ]
        },
        "ceph_osd_ec_profile_get": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_osd_erasure-code-profile_get__-f_json-pretty",
                    "command": "/usr/bin/ceph osd erasure-code-profile get  -f json-pretty",
                    "pattern": [],
                    "pre_command": "ceph_osd_ec_profile_ls"
                }
            ]
        },
        "ceph_osd_tree": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_osd_tree_-f_json-pretty",
                    "command": "/usr/bin/ceph osd tree -f json-pretty",
                    "pattern": []
                }
            ]
        },
        "ceph_s": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_-s_-f_json-pretty",
                    "command": "/usr/bin/ceph -s -f json-pretty",
                    "pattern": []
                }
            ]
        },
        "ceph_v": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ceph_-v",
                    "command": "/usr/bin/ceph -v",
                    "pattern": []
                }
            ]
        },
        "certificates_enddate": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/find_.etc.origin.node_.etc.origin.master_.etc.pki_-type_f_-exec_.usr.bin.openssl_x509_-noout_-enddate_-in_-exec_echo_FileName",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/etc/origin/node {CONTAINER_MOUNT_POINT}/etc/origin/master {CONTAINER_MOUNT_POINT}/etc/pki -type f -exec /usr/bin/openssl x509 -noout -enddate -in {} ; -exec echo 'FileName= {}' ;",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/find_.etc.origin.node_.etc.origin.master_.etc.pki_-type_f_-exec_.usr.bin.openssl_x509_-noout_-enddate_-in_-exec_echo_FileName",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/etc/origin/node {CONTAINER_MOUNT_POINT}/etc/origin/master {CONTAINER_MOUNT_POINT}/etc/pki -type f -exec /usr/bin/openssl x509 -noout -enddate -in {} ; -exec echo 'FileName= {}' ;",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/find_.etc.origin.node_.etc.origin.master_.etc.pki_-type_f_-exec_.usr.bin.openssl_x509_-noout_-enddate_-in_-exec_echo_FileName",
                    "command": "/usr/bin/find /etc/origin/node /etc/origin/master /etc/pki -type f -exec /usr/bin/openssl x509 -noout -enddate -in '{}' \\; -exec echo 'FileName= {}' \\;",
                    "pattern": []
                }
            ]
        },
        "chkconfig": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/chkconfig_--list",
                    "command": "/sbin/chkconfig --list",
                    "pattern": []
                }
            ]
        },
        "chrony.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/chrony.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/chrony.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/chrony.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/chrony.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/chrony.conf",
                    "file": "/etc/chrony.conf",
                    "pattern": []
                }
            ]
        },
        "chronyc_sources": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/chronyc_sources",
                    "command": "/usr/bin/chronyc sources",
                    "pattern": []
                }
            ]
        },
        "cib.xml": {
            "docker_container": [
                {
                    "archive_file_name": "/var/lib/pacemaker/cib/cib.xml",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pacemaker/cib/cib.xml",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/lib/pacemaker/cib/cib.xml",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pacemaker/cib/cib.xml",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/lib/pacemaker/cib/cib.xml",
                    "file": "/var/lib/pacemaker/cib/cib.xml",
                    "pattern": []
                }
            ]
        },
        "cinder.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/cinder/cinder.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/cinder/cinder.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/cinder/cinder.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/cinder/cinder.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/cinder/cinder.conf",
                    "file": "/etc/cinder/cinder.conf",
                    "pattern": []
                }
            ]
        },
        "cinder_volume.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/cinder/volume.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/cinder/volume.log",
                    "pattern": [
                        "Image cloning unsuccessful for image",
                        "Message: NFS file could not be discovered.",
                        "[Errno 24] Too many open files"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/cinder/volume.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/cinder/volume.log",
                    "pattern": [
                        "Image cloning unsuccessful for image",
                        "Message: NFS file could not be discovered.",
                        "[Errno 24] Too many open files"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/cinder/volume.log",
                    "file": "/var/log/cinder/volume.log",
                    "pattern": [
                        "Image cloning unsuccessful for image",
                        "Message: NFS file could not be discovered.",
                        "[Errno 24] Too many open files"
                    ]
                }
            ]
        },
        "cluster.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/cluster/cluster.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/cluster/cluster.conf",
                    "pattern": [
                        "<lvm",
                        "clusternode name="
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/cluster/cluster.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/cluster/cluster.conf",
                    "pattern": [
                        "<lvm",
                        "clusternode name="
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/cluster/cluster.conf",
                    "file": "/etc/cluster/cluster.conf",
                    "pattern": [
                        "<lvm",
                        "clusternode name="
                    ]
                }
            ]
        },
        "cmdline": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/cmdline",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/cmdline",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/cmdline",
                    "file": "/proc/cmdline",
                    "pattern": []
                }
            ]
        },
        "corosync": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysconfig/corosync",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/corosync",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysconfig/corosync",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/corosync",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysconfig/corosync",
                    "file": "/etc/sysconfig/corosync",
                    "pattern": []
                }
            ]
        },
        "cpuinfo": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/cpuinfo",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/cpuinfo",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/cpuinfo",
                    "file": "/proc/cpuinfo",
                    "pattern": []
                }
            ]
        },
        "current_clocksource": {
            "docker_container": [
                {
                    "archive_file_name": "/sys/devices/system/clocksource/clocksource0/current_clocksource",
                    "file": "{CONTAINER_MOUNT_POINT}/sys/devices/system/clocksource/clocksource0/current_clocksource",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/sys/devices/system/clocksource/clocksource0/current_clocksource",
                    "file": "/sys/devices/system/clocksource/clocksource0/current_clocksource",
                    "pattern": []
                }
            ]
        },
        "date": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/date",
                    "command": "/bin/date",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/date",
                    "command": "/bin/date",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/date",
                    "command": "/bin/date",
                    "pattern": []
                }
            ]
        },
        "date_utc": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/date_--utc",
                    "command": "/bin/date --utc",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/date_--utc",
                    "command": "/bin/date --utc",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/date_--utc",
                    "command": "/bin/date --utc",
                    "pattern": []
                }
            ]
        },
        "dcbtool_gc_dcb": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/dcbtool_gc__dcb",
                    "command": "/sbin/dcbtool gc  dcb",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "df_-al": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/df_-al",
                    "command": "/bin/df -al",
                    "pattern": []
                }
            ]
        },
        "df_-alP": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/df_-alP",
                    "command": "/bin/df -alP",
                    "pattern": []
                }
            ]
        },
        "df_-li": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/df_-li",
                    "command": "/bin/df -li",
                    "pattern": []
                }
            ]
        },
        "dig": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/dig_dnssec_._DNSKEY",
                    "command": "/usr/bin/dig +dnssec . DNSKEY",
                    "pattern": [
                        "ANSWER SECTION",
                        "DNSKEY",
                        "RRSIG"
                    ]
                }
            ]
        },
        "dmesg": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/dmesg",
                    "command": "/bin/dmesg",
                    "pattern": [
                        "CSUM",
                        "CVE-2017-1000364",
                        "Dropping TSO",
                        "HP HPSA",
                        "Linux version",
                        "NUMA: ",
                        "P220i",
                        "P420i",
                        "WRITE SAME failed. Manually zeroing",
                        "blocked FC remote port time out",
                        "crashkernel reservation failed",
                        "crashkernel=auto resulted in zero bytes of reserved memory",
                        "ixgbevf: Unknown parameter `InterruptThrottleRate'",
                        "vpd r/w failed"
                    ]
                }
            ]
        },
        "dmidecode": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/dmidecode",
                    "command": "/usr/sbin/dmidecode",
                    "pattern": []
                }
            ]
        },
        "docker_info": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/docker_info",
                    "command": "/usr/bin/docker info",
                    "pattern": []
                }
            ]
        },
        "docker_list_containers": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/docker_ps_--all_--no-trunc",
                    "command": "/usr/bin/docker ps --all --no-trunc",
                    "pattern": []
                }
            ]
        },
        "docker_list_images": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/docker_images_--all_--no-trunc_--digests",
                    "command": "/usr/bin/docker images --all --no-trunc --digests",
                    "pattern": []
                }
            ]
        },
        "dumpe2fs-h": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/dumpe2fs_-h_",
                    "command": "/sbin/dumpe2fs -h",
                    "pattern": [],
                    "pre_command": "dumpdev"
                }
            ]
        },
        "engine.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/ovirt-engine/engine.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/ovirt-engine/engine.log",
                    "pattern": [
                        "Duplicate ID 'virtio-serial0' for device",
                        "Received fatal alert: certificate_expired",
                        "XML error: Multiple 'virtio-serial' controllers with index '0'",
                        "[org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher]",
                        "has paused due to storage I/O problem"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/ovirt-engine/engine.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/ovirt-engine/engine.log",
                    "pattern": [
                        "Duplicate ID 'virtio-serial0' for device",
                        "Received fatal alert: certificate_expired",
                        "XML error: Multiple 'virtio-serial' controllers with index '0'",
                        "[org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher]",
                        "has paused due to storage I/O problem"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/ovirt-engine/engine.log",
                    "file": "/var/log/ovirt-engine/engine.log",
                    "pattern": [
                        "Duplicate ID 'virtio-serial0' for device",
                        "Received fatal alert: certificate_expired",
                        "XML error: Multiple 'virtio-serial' controllers with index '0'",
                        "[org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher]",
                        "has paused due to storage I/O problem"
                    ]
                }
            ]
        },
        "etc_journald.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/()*journald\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/()*journald\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/systemd/()*journald\\.conf",
                    "pattern": []
                }
            ]
        },
        "etc_journald.conf.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ]
        },
        "ethtool": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ethtool_",
                    "command": "/sbin/ethtool",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "ethtool-S": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ethtool_-S_",
                    "command": "/sbin/ethtool -S",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "ethtool-g": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ethtool_-g_",
                    "command": "/sbin/ethtool -g",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "ethtool-i": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ethtool_-i_",
                    "command": "/sbin/ethtool -i",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "ethtool-k": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ethtool_-k_",
                    "command": "/sbin/ethtool -k",
                    "pattern": [],
                    "pre_command": "iface"
                }
            ]
        },
        "facter": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/facter",
                    "command": "/usr/bin/facter",
                    "pattern": []
                }
            ]
        },
        "fstab": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/fstab",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/fstab",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/fstab",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/fstab",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/fstab",
                    "file": "/etc/fstab",
                    "pattern": []
                }
            ]
        },
        "galera.cnf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/my.cnf.d/galera.cnf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/my.cnf.d/galera.cnf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/my.cnf.d/galera.cnf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/my.cnf.d/galera.cnf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/my.cnf.d/galera.cnf",
                    "file": "/etc/my.cnf.d/galera.cnf",
                    "pattern": []
                }
            ]
        },
        "getenforce": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/getenforce",
                    "command": "/usr/sbin/getenforce",
                    "pattern": []
                }
            ]
        },
        "grub.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/boot/grub/grub.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/grub/grub.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/boot/grub/grub.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/grub/grub.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/boot/grub/grub.conf",
                    "file": "/boot/grub/grub.conf",
                    "pattern": []
                }
            ]
        },
        "grub1_config_perms": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub.grub.conf",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/boot/grub/grub.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub.grub.conf",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/boot/grub/grub.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub.grub.conf",
                    "command": "/bin/ls -l /boot/grub/grub.conf",
                    "pattern": []
                }
            ]
        },
        "grub2-efi.cfg": {
            "docker_container": [
                {
                    "archive_file_name": "/boot/efi/EFI/redhat/grub.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/efi/EFI/redhat/grub.cfg",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/boot/efi/EFI/redhat/grub.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/efi/EFI/redhat/grub.cfg",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/boot/efi/EFI/redhat/grub.cfg",
                    "file": "/boot/efi/EFI/redhat/grub.cfg",
                    "pattern": []
                }
            ]
        },
        "grub2.cfg": {
            "docker_container": [
                {
                    "archive_file_name": "/boot/grub2/grub.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/grub2/grub.cfg",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/boot/grub2/grub.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/boot/grub2/grub.cfg",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/boot/grub2/grub.cfg",
                    "file": "/boot/grub2/grub.cfg",
                    "pattern": []
                }
            ]
        },
        "grub_config_perms": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub2.grub.cfg",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/boot/grub2/grub.cfg",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub2.grub.cfg",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/boot/grub2/grub.cfg",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.boot.grub2.grub.cfg",
                    "command": "/bin/ls -l /boot/grub2/grub.cfg",
                    "pattern": []
                }
            ]
        },
        "haproxy_cfg": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/haproxy/haproxy.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/haproxy/haproxy.cfg",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/haproxy/haproxy.cfg",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/haproxy/haproxy.cfg",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/haproxy/haproxy.cfg",
                    "file": "/etc/haproxy/haproxy.cfg",
                    "pattern": []
                }
            ]
        },
        "heat.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/heat/heat.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/heat/heat.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/heat/heat.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/heat/heat.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/heat/heat.conf",
                    "file": "/etc/heat/heat.conf",
                    "pattern": []
                }
            ]
        },
        "heat_crontab": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/crontab_-l_-u_heat",
                    "command": "/usr/bin/crontab -l -u heat",
                    "pattern": [
                        "heat-manage"
                    ]
                }
            ]
        },
        "hostname": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/hostname",
                    "command": "/bin/hostname",
                    "pattern": []
                }
            ],
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/hostname",
                    "command": "/bin/hostname",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/hostname",
                    "command": "/bin/hostname",
                    "pattern": []
                }
            ]
        },
        "hosts": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/hosts",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/hosts",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/hosts",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/hosts",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/hosts",
                    "file": "/etc/hosts",
                    "pattern": []
                }
            ]
        },
        "httpd-V": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/httpd_-V",
                    "command": "/usr/sbin/httpd -V",
                    "pattern": []
                }
            ]
        },
        "httpd.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/httpd/conf/()*httpd\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/httpd/conf/()*httpd\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/httpd/conf/()*httpd\\.conf",
                    "pattern": []
                }
            ]
        },
        "httpd.conf.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/httpd/conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/httpd/conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/httpd/conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ]
        },
        "httpd_error_log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/httpd/error_log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/httpd/error_log",
                    "pattern": [
                        "(28)No space left on device: ",
                        "Require ServerLimit > 0, setting to 1",
                        "and would exceed the ServerLimit value of ",
                        "consider raising the MaxClients setting",
                        "consider raising the MaxRequestWorkers setting",
                        "exceed ServerLimit of",
                        "exceeds ServerLimit value of",
                        "exceeds compile time limit of",
                        "exceeds compile-time limit of",
                        "not allowed, increasing to 1"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/httpd/error_log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/httpd/error_log",
                    "pattern": [
                        "(28)No space left on device: ",
                        "Require ServerLimit > 0, setting to 1",
                        "and would exceed the ServerLimit value of ",
                        "consider raising the MaxClients setting",
                        "consider raising the MaxRequestWorkers setting",
                        "exceed ServerLimit of",
                        "exceeds ServerLimit value of",
                        "exceeds compile time limit of",
                        "exceeds compile-time limit of",
                        "not allowed, increasing to 1"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/httpd/error_log",
                    "file": "/var/log/httpd/error_log",
                    "pattern": [
                        "(28)No space left on device: ",
                        "Require ServerLimit > 0, setting to 1",
                        "and would exceed the ServerLimit value of ",
                        "consider raising the MaxClients setting",
                        "consider raising the MaxRequestWorkers setting",
                        "exceed ServerLimit of",
                        "exceeds ServerLimit value of",
                        "exceeds compile time limit of",
                        "exceeds compile-time limit of",
                        "not allowed, increasing to 1"
                    ]
                }
            ]
        },
        "ifcfg": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/network-scripts/()*ifcfg-.*",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/network-scripts/()*ifcfg-.*",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/sysconfig/network-scripts/()*ifcfg-.*",
                    "pattern": []
                }
            ]
        },
        "imagemagick_policy": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ImageMagick/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib64/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ImageMagick/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib64/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/ImageMagick/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/usr/lib64/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                },
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/usr/lib/ImageMagick-6\\.5\\.4/config/()*policy\\.xml",
                    "pattern": [
                        "</policymap>",
                        "<policy",
                        "<policymap>"
                    ]
                }
            ]
        },
        "installed-rpms": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/rpm_-qa_--qf_NAME_-_VERSION_-_RELEASE_._ARCH_INSTALLTIME_date_BUILDTIME_RSAHEADER_pgpsig_DSAHEADER_pgpsig",
                    "command": "/bin/rpm --root={CONTAINER_MOUNT_POINT} -qa '--qf=%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\t%{INSTALLTIME:date}\t%{BUILDTIME}\t%{RSAHEADER:pgpsig}\t%{DSAHEADER:pgpsig}\n'",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/rpm_-qa_--qf_NAME_-_VERSION_-_RELEASE_._ARCH_INSTALLTIME_date_BUILDTIME_RSAHEADER_pgpsig_DSAHEADER_pgpsig",
                    "command": "/bin/rpm --root={CONTAINER_MOUNT_POINT} -qa '--qf=%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\t%{INSTALLTIME:date}\t%{BUILDTIME}\t%{RSAHEADER:pgpsig}\t%{DSAHEADER:pgpsig}\n'",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/rpm_-qa_--qf_NAME_-_VERSION_-_RELEASE_._ARCH_INSTALLTIME_date_BUILDTIME_RSAHEADER_pgpsig_DSAHEADER_pgpsig",
                    "command": "/bin/rpm -qa --qf='%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\t%{INSTALLTIME:date}\t%{BUILDTIME}\t%{RSAHEADER:pgpsig}\t%{DSAHEADER:pgpsig}\n'",
                    "pattern": []
                }
            ]
        },
        "interrupts": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/interrupts",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/interrupts",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/interrupts",
                    "file": "/proc/interrupts",
                    "pattern": []
                }
            ]
        },
        "ip_addr": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ip_addr",
                    "command": "/sbin/ip addr",
                    "pattern": []
                }
            ]
        },
        "ip_route_show_table_all": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ip_route_show_table_all",
                    "command": "/sbin/ip route show table all",
                    "pattern": []
                }
            ]
        },
        "ipcs_s": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ipcs_-s",
                    "command": "/usr/bin/ipcs -s",
                    "pattern": []
                }
            ]
        },
        "ipcs_s_i": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ipcs_-s_-i_",
                    "command": "/usr/bin/ipcs -s -i",
                    "pattern": [],
                    "pre_command": "semid"
                }
            ]
        },
        "iptables": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/iptables-save",
                    "command": "/sbin/iptables-save",
                    "pattern": []
                }
            ]
        },
        "iptables_permanent": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysconfig/iptables",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/iptables",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysconfig/iptables",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/iptables",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysconfig/iptables",
                    "file": "/etc/sysconfig/iptables",
                    "pattern": []
                }
            ]
        },
        "ipv4_neigh": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ip_-4_neighbor_show_nud_all",
                    "command": "/sbin/ip -4 neighbor show nud all",
                    "pattern": []
                }
            ]
        },
        "ipv6_neigh": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ip_-6_neighbor_show_nud_all",
                    "command": "/sbin/ip -6 neighbor show nud all",
                    "pattern": []
                }
            ]
        },
        "kdump.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/kdump.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/kdump.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/kdump.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/kdump.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/kdump.conf",
                    "file": "/etc/kdump.conf",
                    "pattern": []
                }
            ]
        },
        "kexec_crash_size": {
            "docker_container": [
                {
                    "archive_file_name": "/sys/kernel/kexec_crash_size",
                    "file": "{CONTAINER_MOUNT_POINT}/sys/kernel/kexec_crash_size",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/sys/kernel/kexec_crash_size",
                    "file": "/sys/kernel/kexec_crash_size",
                    "pattern": []
                }
            ]
        },
        "keystone_crontab": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/crontab_-l_-u_keystone",
                    "command": "/usr/bin/crontab -l -u keystone",
                    "pattern": [
                        "heat-manage",
                        "keystone-manage"
                    ]
                }
            ]
        },
        "ksmstate": {
            "docker_container": [
                {
                    "archive_file_name": "/sys/kernel/mm/ksm/run",
                    "file": "{CONTAINER_MOUNT_POINT}/sys/kernel/mm/ksm/run",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/sys/kernel/mm/ksm/run",
                    "file": "/sys/kernel/mm/ksm/run",
                    "pattern": []
                }
            ]
        },
        "limits.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/security/()*limits\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/security/()*limits\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/security/()*limits\\.conf",
                    "pattern": []
                }
            ]
        },
        "limits.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/security/limits\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/security/limits\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/security/limits\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ]
        },
        "localtime": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/file_-L_.etc.localtime",
                    "command": "/usr/bin/file -L /etc/localtime",
                    "pattern": []
                }
            ]
        },
        "lpstat_p": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lpstat_-p",
                    "command": "/usr/bin/lpstat -p",
                    "pattern": []
                }
            ]
        },
        "ls_boot": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.boot",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/boot",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.boot",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/boot",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.boot",
                    "command": "/bin/ls -lanR /boot",
                    "pattern": []
                }
            ]
        },
        "ls_dev": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/dev",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/dev",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev",
                    "command": "/bin/ls -lanR /dev",
                    "pattern": []
                }
            ]
        },
        "ls_disk": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev.disk",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/dev/disk",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev.disk",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/dev/disk",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.dev.disk",
                    "command": "/bin/ls -lanR /dev/disk",
                    "pattern": []
                }
            ]
        },
        "ls_docker_volumes": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.var.lib.docker.volumes",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/var/lib/docker/volumes",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.var.lib.docker.volumes",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/var/lib/docker/volumes",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.var.lib.docker.volumes",
                    "command": "/bin/ls -lanR /var/lib/docker/volumes",
                    "pattern": []
                }
            ]
        },
        "ls_etc": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.etc",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/etc",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.etc",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/etc",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.etc",
                    "command": "/bin/ls -lanR /etc",
                    "pattern": []
                }
            ]
        },
        "ls_sys_firmware": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.sys.firmware",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/sys/firmware",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.sys.firmware",
                    "command": "/bin/ls -lanR {CONTAINER_MOUNT_POINT}/sys/firmware",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-lanR_.sys.firmware",
                    "command": "/bin/ls -lanR /sys/firmware",
                    "pattern": []
                }
            ]
        },
        "ls_var_log": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-la_.var.log_.var.log.audit",
                    "command": "/bin/ls -la {CONTAINER_MOUNT_POINT}/var/log {CONTAINER_MOUNT_POINT}/var/log/audit",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-la_.var.log_.var.log.audit",
                    "command": "/bin/ls -la {CONTAINER_MOUNT_POINT}/var/log {CONTAINER_MOUNT_POINT}/var/log/audit",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-la_.var.log_.var.log.audit",
                    "command": "/bin/ls -la /var/log /var/log/audit",
                    "pattern": []
                }
            ]
        },
        "lsblk": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lsblk",
                    "command": "/bin/lsblk",
                    "pattern": []
                }
            ]
        },
        "lsblk_pairs": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lsblk_-P_-o_NAME_KNAME_MAJ_MIN_FSTYPE_MOUNTPOINT_LABEL_UUID_RA_RO_RM_MODEL_SIZE_STATE_OWNER_GROUP_MODE_ALIGNMENT_MIN-IO_OPT-IO_PHY-SEC_LOG-SEC_ROTA_SCHED_RQ-SIZE_TYPE_DISC-ALN_DISC-GRAN_DISC-MAX_DISC-ZERO",
                    "command": "/bin/lsblk -P -o NAME,KNAME,MAJ:MIN,FSTYPE,MOUNTPOINT,LABEL,UUID,RA,RO,RM,MODEL,SIZE,STATE,OWNER,GROUP,MODE,ALIGNMENT,MIN-IO,OPT-IO,PHY-SEC,LOG-SEC,ROTA,SCHED,RQ-SIZE,TYPE,DISC-ALN,DISC-GRAN,DISC-MAX,DISC-ZERO",
                    "pattern": []
                }
            ]
        },
        "lsmod": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lsmod",
                    "command": "/sbin/lsmod",
                    "pattern": []
                }
            ]
        },
        "lsof": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lsof",
                    "command": "/usr/sbin/lsof",
                    "pattern": [
                        "COMMAND",
                        "libcrypto",
                        "libssl",
                        "libssl.so",
                        "lsnrctl",
                        "oracle",
                        "tnslsnr"
                    ]
                }
            ]
        },
        "lspci": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lspci",
                    "command": "/sbin/lspci",
                    "pattern": []
                }
            ]
        },
        "lvm.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/lvm/lvm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/lvm/lvm.conf",
                    "pattern": [
                        "auto_activation_volume_list",
                        "filter",
                        "locking_type",
                        "volume_list"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/lvm/lvm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/lvm/lvm.conf",
                    "pattern": [
                        "auto_activation_volume_list",
                        "filter",
                        "locking_type",
                        "volume_list"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/lvm/lvm.conf",
                    "file": "/etc/lvm/lvm.conf",
                    "pattern": [
                        "auto_activation_volume_list",
                        "filter",
                        "locking_type",
                        "volume_list"
                    ]
                }
            ]
        },
        "lvs_noheadings": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lvs_--nameprefixes_--noheadings_--separator_-a_-o_lv_all_--config_global_locking_type_0",
                    "command": "/sbin/lvs --nameprefixes --noheadings --separator='|' -a -o lv_all --config=\"global{locking_type=0}\"",
                    "pattern": []
                }
            ]
        },
        "machine-id1": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/redhat-access-insights/machine-id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat-access-insights/machine-id",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/redhat-access-insights/machine-id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat-access-insights/machine-id",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/redhat-access-insights/machine-id",
                    "file": "/etc/redhat-access-insights/machine-id",
                    "pattern": []
                }
            ]
        },
        "machine-id2": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/redhat_access_proactive/machine-id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat_access_proactive/machine-id",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/redhat_access_proactive/machine-id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat_access_proactive/machine-id",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/redhat_access_proactive/machine-id",
                    "file": "/etc/redhat_access_proactive/machine-id",
                    "pattern": []
                }
            ]
        },
        "mdstat": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/mdstat",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/mdstat",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/mdstat",
                    "file": "/proc/mdstat",
                    "pattern": []
                }
            ]
        },
        "meminfo": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/meminfo",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/meminfo",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/meminfo",
                    "file": "/proc/meminfo",
                    "pattern": []
                }
            ]
        },
        "messages": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/messages",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/messages",
                    "pattern": [
                        " disconnect jid=",
                        "'Ifcfg' object has no attribute 'runningConfig",
                        ": segfault at ",
                        ": session replaced: jid=",
                        "Abort command issued",
                        "DMA Status error.  Resetting chip",
                        "Dazed and confused, but trying to continue",
                        "Device offlined - not ready after error recovery",
                        "Error deleting EBS Disk volume aws",
                        "Error running DeviceResume dm_task_run failed",
                        "Machine",
                        "Neighbour table overflow",
                        "Out of MCCQ wrbs",
                        "Out of memory: kill process",
                        "SCSI device reset on",
                        "SDN initialization failed: Error: Existing service with IP: None is not part of service network",
                        "SELinux is preventing /usr/sbin/logrotate from getattr access on the file",
                        "Sense Key : Illegal Request [current]",
                        "Temperature above threshold",
                        "Uhhuh. NMI received for unknown reason",
                        "Virtualization daemon",
                        "WRITE SAME failed. Manually zeroing",
                        "be2net",
                        "blocked FC remote port time out",
                        "does not seem to be present, delaying initialization",
                        "ext4_ext_search_left",
                        "fiid_obj_get: 'present_countdown_value': data not available",
                        "firewalld - dynamic firewall daemon",
                        "heated above trip temperature",
                        "in libnl.so.1",
                        "irq handler for vector (irq -1)",
                        "is beyond advertised capabilities",
                        "kernel: CIFS VFS: Unexpected SMB signature",
                        "kernel: bnx2fc: byte_count",
                        "kernel: lockd: Unknown symbol register_inet6addr_notifier",
                        "kernel: lockd: Unknown symbol unregister_inet6addr_notifier",
                        "kernel: megasas: Found FW in FAULT state,will reset adapter.",
                        "khash_super_prune_nolock",
                        "megaraid_sas: FW detected to be in faultstate, restarting it",
                        "mode:0x20",
                        "multipathd.service operation timed out. Terminating",
                        "nf_conntrack: expectation table full",
                        "nf_conntrack: table full, dropping packet",
                        "page allocation failure",
                        "per_source_limit from",
                        "server kernel: rhsmcertd-worke",
                        "skb_copy",
                        "skb_over_panic",
                        "start request repeated too quickly for docker.service",
                        "swapper: page allocation failure",
                        "tg3_start_xmit",
                        "timeout; kill it",
                        "udev: renamed network interface",
                        "udevd",
                        "vdsm-tool: EnvironmentError: Failed to restore the persisted networks"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/messages",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/messages",
                    "pattern": [
                        " disconnect jid=",
                        "'Ifcfg' object has no attribute 'runningConfig",
                        ": segfault at ",
                        ": session replaced: jid=",
                        "Abort command issued",
                        "DMA Status error.  Resetting chip",
                        "Dazed and confused, but trying to continue",
                        "Device offlined - not ready after error recovery",
                        "Error deleting EBS Disk volume aws",
                        "Error running DeviceResume dm_task_run failed",
                        "Machine",
                        "Neighbour table overflow",
                        "Out of MCCQ wrbs",
                        "Out of memory: kill process",
                        "SCSI device reset on",
                        "SDN initialization failed: Error: Existing service with IP: None is not part of service network",
                        "SELinux is preventing /usr/sbin/logrotate from getattr access on the file",
                        "Sense Key : Illegal Request [current]",
                        "Temperature above threshold",
                        "Uhhuh. NMI received for unknown reason",
                        "Virtualization daemon",
                        "WRITE SAME failed. Manually zeroing",
                        "be2net",
                        "blocked FC remote port time out",
                        "does not seem to be present, delaying initialization",
                        "ext4_ext_search_left",
                        "fiid_obj_get: 'present_countdown_value': data not available",
                        "firewalld - dynamic firewall daemon",
                        "heated above trip temperature",
                        "in libnl.so.1",
                        "irq handler for vector (irq -1)",
                        "is beyond advertised capabilities",
                        "kernel: CIFS VFS: Unexpected SMB signature",
                        "kernel: bnx2fc: byte_count",
                        "kernel: lockd: Unknown symbol register_inet6addr_notifier",
                        "kernel: lockd: Unknown symbol unregister_inet6addr_notifier",
                        "kernel: megasas: Found FW in FAULT state,will reset adapter.",
                        "khash_super_prune_nolock",
                        "megaraid_sas: FW detected to be in faultstate, restarting it",
                        "mode:0x20",
                        "multipathd.service operation timed out. Terminating",
                        "nf_conntrack: expectation table full",
                        "nf_conntrack: table full, dropping packet",
                        "page allocation failure",
                        "per_source_limit from",
                        "server kernel: rhsmcertd-worke",
                        "skb_copy",
                        "skb_over_panic",
                        "start request repeated too quickly for docker.service",
                        "swapper: page allocation failure",
                        "tg3_start_xmit",
                        "timeout; kill it",
                        "udev: renamed network interface",
                        "udevd",
                        "vdsm-tool: EnvironmentError: Failed to restore the persisted networks"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/messages",
                    "file": "/var/log/messages",
                    "pattern": [
                        " disconnect jid=",
                        "'Ifcfg' object has no attribute 'runningConfig",
                        ": segfault at ",
                        ": session replaced: jid=",
                        "Abort command issued",
                        "DMA Status error.  Resetting chip",
                        "Dazed and confused, but trying to continue",
                        "Device offlined - not ready after error recovery",
                        "Error deleting EBS Disk volume aws",
                        "Error running DeviceResume dm_task_run failed",
                        "Machine",
                        "Neighbour table overflow",
                        "Out of MCCQ wrbs",
                        "Out of memory: kill process",
                        "SCSI device reset on",
                        "SDN initialization failed: Error: Existing service with IP: None is not part of service network",
                        "SELinux is preventing /usr/sbin/logrotate from getattr access on the file",
                        "Sense Key : Illegal Request [current]",
                        "Temperature above threshold",
                        "Uhhuh. NMI received for unknown reason",
                        "Virtualization daemon",
                        "WRITE SAME failed. Manually zeroing",
                        "be2net",
                        "blocked FC remote port time out",
                        "does not seem to be present, delaying initialization",
                        "ext4_ext_search_left",
                        "fiid_obj_get: 'present_countdown_value': data not available",
                        "firewalld - dynamic firewall daemon",
                        "heated above trip temperature",
                        "in libnl.so.1",
                        "irq handler for vector (irq -1)",
                        "is beyond advertised capabilities",
                        "kernel: CIFS VFS: Unexpected SMB signature",
                        "kernel: bnx2fc: byte_count",
                        "kernel: lockd: Unknown symbol register_inet6addr_notifier",
                        "kernel: lockd: Unknown symbol unregister_inet6addr_notifier",
                        "kernel: megasas: Found FW in FAULT state,will reset adapter.",
                        "khash_super_prune_nolock",
                        "megaraid_sas: FW detected to be in faultstate, restarting it",
                        "mode:0x20",
                        "multipathd.service operation timed out. Terminating",
                        "nf_conntrack: expectation table full",
                        "nf_conntrack: table full, dropping packet",
                        "page allocation failure",
                        "per_source_limit from",
                        "server kernel: rhsmcertd-worke",
                        "skb_copy",
                        "skb_over_panic",
                        "start request repeated too quickly for docker.service",
                        "swapper: page allocation failure",
                        "tg3_start_xmit",
                        "timeout; kill it",
                        "udev: renamed network interface",
                        "udevd",
                        "vdsm-tool: EnvironmentError: Failed to restore the persisted networks"
                    ]
                }
            ]
        },
        "mlx4_port": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.bus.pci.devices._.mlx4_port_0-9_-print_-exec_cat",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/sys/bus/pci/devices/*/mlx4_port[0-9] -print -exec cat {} ;",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.bus.pci.devices._.mlx4_port_0-9_-print_-exec_cat",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/sys/bus/pci/devices/*/mlx4_port[0-9] -print -exec cat {} ;",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.bus.pci.devices._.mlx4_port_0-9_-print_-exec_cat",
                    "command": "/usr/bin/find /sys/bus/pci/devices/*/mlx4_port[0-9] -print -exec cat {} \\;",
                    "pattern": []
                }
            ]
        },
        "modprobe.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/()*modprobe\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/()*modprobe\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/()*modprobe\\.conf",
                    "pattern": []
                }
            ]
        },
        "modprobe.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/modprobe\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/modprobe\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/modprobe\\.d/()*.*\\.conf",
                    "pattern": []
                }
            ]
        },
        "mount": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/mount",
                    "command": "/bin/mount",
                    "pattern": []
                }
            ]
        },
        "multicast_querier": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.devices.virtual.net._-name_multicast_querier_-print_-exec_cat",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/sys/devices/virtual/net/ -name multicast_querier -print -exec cat {} ;",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.devices.virtual.net._-name_multicast_querier_-print_-exec_cat",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/sys/devices/virtual/net/ -name multicast_querier -print -exec cat {} ;",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/find_.sys.devices.virtual.net._-name_multicast_querier_-print_-exec_cat",
                    "command": "/usr/bin/find /sys/devices/virtual/net/ -name multicast_querier -print -exec cat {} \\;",
                    "pattern": []
                }
            ]
        },
        "multipath.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/multipath.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/multipath.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/multipath.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/multipath.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/multipath.conf",
                    "file": "/etc/multipath.conf",
                    "pattern": []
                }
            ]
        },
        "multipath_-v4_-ll": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/multipath_-v4_-ll",
                    "command": "/sbin/multipath -v4 -ll",
                    "pattern": []
                }
            ]
        },
        "named-checkconf_p": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/named-checkconf_-p",
                    "command": "/usr/sbin/named-checkconf -p",
                    "pattern": [
                        "DNSSEC-ENABLE",
                        "Dnssec-Enable",
                        "dnssec-enable"
                    ]
                }
            ]
        },
        "netconsole": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysconfig/netconsole",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/netconsole",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysconfig/netconsole",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/netconsole",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysconfig/netconsole",
                    "file": "/etc/sysconfig/netconsole",
                    "pattern": []
                }
            ]
        },
        "netstat": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/netstat_-neopa",
                    "command": "/bin/netstat -neopa",
                    "pattern": []
                }
            ]
        },
        "netstat-i": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/netstat_-i",
                    "command": "/bin/netstat -i",
                    "pattern": []
                }
            ]
        },
        "netstat-s": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/netstat_-s",
                    "command": "/bin/netstat -s",
                    "pattern": []
                }
            ]
        },
        "netstat_-agn": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/netstat_-agn",
                    "command": "/bin/netstat -agn",
                    "pattern": []
                }
            ]
        },
        "neutron_plugin.ini": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/neutron/plugin.ini",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/neutron/plugin.ini",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/neutron/plugin.ini",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/neutron/plugin.ini",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/neutron/plugin.ini",
                    "file": "/etc/neutron/plugin.ini",
                    "pattern": []
                }
            ]
        },
        "neutron_server_log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/neutron/server.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/neutron/server.log",
                    "pattern": [
                        "No tenant network is available for allocation"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/neutron/server.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/neutron/server.log",
                    "pattern": [
                        "No tenant network is available for allocation"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/neutron/server.log",
                    "file": "/var/log/neutron/server.log",
                    "pattern": [
                        "No tenant network is available for allocation"
                    ]
                }
            ]
        },
        "nfnetlink_queue": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/net/netfilter/nfnetlink_queue",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/net/netfilter/nfnetlink_queue",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/net/netfilter/nfnetlink_queue",
                    "file": "/proc/net/netfilter/nfnetlink_queue",
                    "pattern": []
                }
            ]
        },
        "nfs_exports": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/exports",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/exports",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/exports",
                    "file": "/etc/exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ]
        },
        "nfs_exports.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/exports\\.d/()*.*\\.exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/exports\\.d/()*.*\\.exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/exports\\.d/()*.*\\.exports",
                    "pattern": [
                        "no_root_squash"
                    ]
                }
            ]
        },
        "nova-api_log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/nova/nova-api.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/nova/nova-api.log",
                    "pattern": [
                        "Timed out waiting for a reply to message ID"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/nova/nova-api.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/nova/nova-api.log",
                    "pattern": [
                        "Timed out waiting for a reply to message ID"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/nova/nova-api.log",
                    "file": "/var/log/nova/nova-api.log",
                    "pattern": [
                        "Timed out waiting for a reply to message ID"
                    ]
                }
            ]
        },
        "nova.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/nova/nova.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nova/nova.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/nova/nova.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nova/nova.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/nova/nova.conf",
                    "file": "/etc/nova/nova.conf",
                    "pattern": []
                }
            ]
        },
        "nscd.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/nscd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nscd.conf",
                    "pattern": [
                        "enable-cache"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/nscd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nscd.conf",
                    "pattern": [
                        "enable-cache"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/nscd.conf",
                    "file": "/etc/nscd.conf",
                    "pattern": [
                        "enable-cache"
                    ]
                }
            ]
        },
        "nsswitch.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/nsswitch.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nsswitch.conf",
                    "pattern": [
                        "HOSTS:",
                        "Hosts:",
                        "hosts:"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/nsswitch.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/nsswitch.conf",
                    "pattern": [
                        "HOSTS:",
                        "Hosts:",
                        "hosts:"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/nsswitch.conf",
                    "file": "/etc/nsswitch.conf",
                    "pattern": [
                        "HOSTS:",
                        "Hosts:",
                        "hosts:"
                    ]
                }
            ]
        },
        "ntp.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/ntp.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ntp.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/ntp.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ntp.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/ntp.conf",
                    "file": "/etc/ntp.conf",
                    "pattern": []
                }
            ]
        },
        "ntpq_leap": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ntpq_-c_rv_0_leap",
                    "command": "/usr/sbin/ntpq -c 'rv 0 leap'",
                    "pattern": []
                }
            ]
        },
        "ntpq_pn": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ntpq_-pn",
                    "command": "/usr/sbin/ntpq -pn",
                    "pattern": []
                }
            ]
        },
        "ntptime": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ntptime",
                    "command": "/usr/sbin/ntptime",
                    "pattern": []
                }
            ]
        },
        "oc_get_pod": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_pod_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get pod -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "oc_get_project": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_project_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get project -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "oc_get_pv": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_pv_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get pv -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "oc_get_role": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_role_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get role -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "oc_get_rolebinding": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_rolebinding_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get rolebinding -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "oc_get_service": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/oc_get_service_-o_yaml_--all-namespaces",
                    "command": "/usr/bin/oc get service -o yaml --all-namespaces",
                    "pattern": []
                }
            ]
        },
        "ose_node_config": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/origin/node/node-config.yaml",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/origin/node/node-config.yaml",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/origin/node/node-config.yaml",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/origin/node/node-config.yaml",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/origin/node/node-config.yaml",
                    "file": "/etc/origin/node/node-config.yaml",
                    "pattern": []
                }
            ]
        },
        "ovirt_engine_confd": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ovirt-engine/engine\\.conf\\.d/()*.*",
                    "pattern": [
                        "ENGINE_TMP="
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ovirt-engine/engine\\.conf\\.d/()*.*",
                    "pattern": [
                        "ENGINE_TMP="
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/ovirt-engine/engine\\.conf\\.d/()*.*",
                    "pattern": [
                        "ENGINE_TMP="
                    ]
                }
            ]
        },
        "ovs-vsctl_show": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ovs-vsctl_show",
                    "command": "/usr/bin/ovs-vsctl show",
                    "pattern": []
                }
            ]
        },
        "pacemaker.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/pacemaker.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/pacemaker.log",
                    "pattern": [
                        "pcmk_dbus_find_error"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/pacemaker.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/pacemaker.log",
                    "pattern": [
                        "pcmk_dbus_find_error"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/pacemaker.log",
                    "file": "/var/log/pacemaker.log",
                    "pattern": [
                        "pcmk_dbus_find_error"
                    ]
                }
            ]
        },
        "password-auth": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/pam.d/password-auth",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/pam.d/password-auth",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/pam.d/password-auth",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/pam.d/password-auth",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/pam.d/password-auth",
                    "file": "/etc/pam.d/password-auth",
                    "pattern": []
                }
            ]
        },
        "pluginconf.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum/pluginconf\\.d/()*\\w+\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum/pluginconf\\.d/()*\\w+\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/yum/pluginconf\\.d/()*\\w+\\.conf",
                    "pattern": []
                }
            ]
        },
        "postgresql.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/var/lib/pgsql/data/postgresql.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pgsql/data/postgresql.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/lib/pgsql/data/postgresql.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pgsql/data/postgresql.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/lib/pgsql/data/postgresql.conf",
                    "file": "/var/lib/pgsql/data/postgresql.conf",
                    "pattern": []
                }
            ]
        },
        "postgresql.log": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pgsql/data/pg_log/()*postgresql-.+\\.log",
                    "pattern": [
                        "ERROR:",
                        "checkpoints are occurring too frequently"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/var/lib/pgsql/data/pg_log/()*postgresql-.+\\.log",
                    "pattern": [
                        "ERROR:",
                        "checkpoints are occurring too frequently"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/var/lib/pgsql/data/pg_log/()*postgresql-.+\\.log",
                    "pattern": [
                        "ERROR:",
                        "checkpoints are occurring too frequently"
                    ]
                }
            ]
        },
        "ps_aux": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ps_aux",
                    "command": "/bin/ps aux",
                    "pattern": [
                        "/sapmnt/",
                        "/usr/bin/docker",
                        "/usr/bin/docker daemon",
                        "/usr/bin/docker-current",
                        "/usr/bin/docker-current daemon",
                        "/usr/bin/dockerd-current",
                        "/usr/bin/openshift start master",
                        "/usr/bin/openshift start node",
                        "/usr/bin/postgres",
                        "/usr/bin/postmaster",
                        "/usr/sap/",
                        "COMMAND",
                        "STAP",
                        "STAP/8.2",
                        "ceph-osd",
                        "chronyd",
                        "keystone-all",
                        "ntpd",
                        "phc2sys",
                        "postgres",
                        "postmaster",
                        "ptp4l"
                    ]
                }
            ]
        },
        "ps_auxcww": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ps_auxcww",
                    "command": "/bin/ps auxcww",
                    "pattern": []
                }
            ]
        },
        "ps_auxwww": {
            "docker_container": [
                {
                    "archive_file_name": "/sos_commands/process/ps_auxwww",
                    "file": "{CONTAINER_MOUNT_POINT}/sos_commands/process/ps_auxwww",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/sos_commands/process/ps_auxwww",
                    "file": "{CONTAINER_MOUNT_POINT}/sos_commands/process/ps_auxwww",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/sos_commands/process/ps_auxwww",
                    "file": "/sos_commands/process/ps_auxwww",
                    "pattern": []
                }
            ]
        },
        "pvs_noheadings": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/pvs_--nameprefixes_--noheadings_--separator_-a_-o_pv_all_vg_name_--config_global_locking_type_0",
                    "command": "/sbin/pvs --nameprefixes --noheadings --separator='|' -a -o pv_all,vg_name --config=\"global{locking_type=0}\"",
                    "pattern": []
                }
            ]
        },
        "rabbitmq_queues": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/rabbitmqctl_list_queues_name_messages_consumers_auto_delete",
                    "command": "/usr/sbin/rabbitmqctl list_queues name messages consumers auto_delete",
                    "pattern": []
                }
            ]
        },
        "rabbitmq_report": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/rabbitmqctl_report",
                    "command": "/usr/sbin/rabbitmqctl report",
                    "pattern": []
                }
            ]
        },
        "rabbitmq_startup_log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/rabbitmq/startup_log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rabbitmq/startup_log",
                    "pattern": [
                        "Event crashed log handler:"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/rabbitmq/startup_log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rabbitmq/startup_log",
                    "pattern": [
                        "Event crashed log handler:"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/rabbitmq/startup_log",
                    "file": "/var/log/rabbitmq/startup_log",
                    "pattern": [
                        "Event crashed log handler:"
                    ]
                }
            ]
        },
        "rabbitmq_users": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/rabbitmqctl_list_users",
                    "command": "/usr/sbin/rabbitmqctl list_users",
                    "pattern": []
                }
            ]
        },
        "rc.local": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/rc.d/rc.local",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rc.d/rc.local",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/rc.d/rc.local",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rc.d/rc.local",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/rc.d/rc.local",
                    "file": "/etc/rc.d/rc.local",
                    "pattern": []
                }
            ]
        },
        "redhat-release": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/redhat-release",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat-release",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/redhat-release",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/redhat-release",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/redhat-release",
                    "file": "/etc/redhat-release",
                    "pattern": []
                }
            ]
        },
        "resolv.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/resolv.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/resolv.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/resolv.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/resolv.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/resolv.conf",
                    "file": "/etc/resolv.conf",
                    "pattern": []
                }
            ]
        },
        "rhn-entitlement-cert.xml": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/rhn/()*rhn-entitlement-cert\\.xml.*",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/rhn/()*rhn-entitlement-cert\\.xml.*",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/sysconfig/rhn/()*rhn-entitlement-cert\\.xml.*",
                    "pattern": []
                }
            ]
        },
        "rhn.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/rhn/rhn.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rhn/rhn.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/rhn/rhn.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rhn/rhn.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/rhn/rhn.conf",
                    "file": "/etc/rhn/rhn.conf",
                    "pattern": []
                }
            ]
        },
        "rhn_hibernate.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "file": "/usr/share/rhn/config-defaults/rhn_hibernate.conf",
                    "pattern": []
                }
            ]
        },
        "rhn_search_daemon.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/rhn/search/rhn_search_daemon.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rhn/search/rhn_search_daemon.log",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/rhn/search/rhn_search_daemon.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rhn/search/rhn_search_daemon.log",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/rhn/search/rhn_search_daemon.log",
                    "file": "/var/log/rhn/search/rhn_search_daemon.log",
                    "pattern": [
                        "APPARENT DEADLOCK!"
                    ]
                }
            ]
        },
        "rhn_taskomatic_daemon.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/rhn/rhn_taskomatic_daemon.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rhn/rhn_taskomatic_daemon.log",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/rhn/rhn_taskomatic_daemon.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/rhn/rhn_taskomatic_daemon.log",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/rhn/rhn_taskomatic_daemon.log",
                    "file": "/var/log/rhn/rhn_taskomatic_daemon.log",
                    "pattern": []
                }
            ]
        },
        "rhsm.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/rhsm/rhsm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rhsm/rhsm.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/rhsm/rhsm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rhsm/rhsm.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/rhsm/rhsm.conf",
                    "file": "/etc/rhsm/rhsm.conf",
                    "pattern": []
                }
            ]
        },
        "root_crontab": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/crontab_-l_-u_root",
                    "command": "/usr/bin/crontab -l -u root",
                    "pattern": [
                        "heat-manage"
                    ]
                }
            ]
        },
        "rpm_-V_packages": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/rpm_-V_coreutils_procps_procps-ng_shadow-utils_passwd_sudo",
                    "command": "/bin/rpm --root={CONTAINER_MOUNT_POINT} -V coreutils procps procps-ng shadow-utils passwd sudo",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/rpm_-V_coreutils_procps_procps-ng_shadow-utils_passwd_sudo",
                    "command": "/bin/rpm --root={CONTAINER_MOUNT_POINT} -V coreutils procps procps-ng shadow-utils passwd sudo",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/rpm_-V_coreutils_procps_procps-ng_shadow-utils_passwd_sudo",
                    "command": "/bin/rpm -V coreutils procps procps-ng shadow-utils passwd sudo",
                    "pattern": []
                }
            ]
        },
        "rsyslog.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/rsyslog.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rsyslog.conf",
                    "pattern": [
                        "imtcp",
                        "regex"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/rsyslog.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/rsyslog.conf",
                    "pattern": [
                        "imtcp",
                        "regex"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/rsyslog.conf",
                    "file": "/etc/rsyslog.conf",
                    "pattern": [
                        "imtcp",
                        "regex"
                    ]
                }
            ]
        },
        "samba": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/samba/smb.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/samba/smb.conf",
                    "pattern": [
                        "GLOBAL",
                        "Global",
                        "MAX SMBD PROCESSES",
                        "Max Smbd Processes",
                        "NT PIPE SUPPORT",
                        "Nt Pipe Support",
                        "REALM",
                        "Realm",
                        "SECURITY",
                        "Security",
                        "[",
                        "global",
                        "max smbd processes",
                        "nt pipe support",
                        "realm",
                        "security"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/samba/smb.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/samba/smb.conf",
                    "pattern": [
                        "GLOBAL",
                        "Global",
                        "MAX SMBD PROCESSES",
                        "Max Smbd Processes",
                        "NT PIPE SUPPORT",
                        "Nt Pipe Support",
                        "REALM",
                        "Realm",
                        "SECURITY",
                        "Security",
                        "[",
                        "global",
                        "max smbd processes",
                        "nt pipe support",
                        "realm",
                        "security"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/samba/smb.conf",
                    "file": "/etc/samba/smb.conf",
                    "pattern": [
                        "GLOBAL",
                        "Global",
                        "MAX SMBD PROCESSES",
                        "Max Smbd Processes",
                        "NT PIPE SUPPORT",
                        "Nt Pipe Support",
                        "REALM",
                        "Realm",
                        "SECURITY",
                        "Security",
                        "[",
                        "global",
                        "max smbd processes",
                        "nt pipe support",
                        "realm",
                        "security"
                    ]
                }
            ]
        },
        "satellite_version.rb": {
            "docker_container": [
                {
                    "archive_file_name": "/usr/share/foreman/lib/satellite/version.rb",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/share/foreman/lib/satellite/version.rb",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/usr/share/foreman/lib/satellite/version.rb",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/share/foreman/lib/satellite/version.rb",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/usr/share/foreman/lib/satellite/version.rb",
                    "file": "/usr/share/foreman/lib/satellite/version.rb",
                    "pattern": []
                }
            ]
        },
        "scsi": {
            "docker_container": [
                {
                    "archive_file_name": "/proc/scsi/scsi",
                    "file": "{CONTAINER_MOUNT_POINT}/proc/scsi/scsi",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/proc/scsi/scsi",
                    "file": "/proc/scsi/scsi",
                    "pattern": []
                }
            ]
        },
        "secure": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/secure",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/secure",
                    "pattern": [
                        "error: session_pty_req: session"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/secure",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/secure",
                    "pattern": [
                        "error: session_pty_req: session"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/secure",
                    "file": "/var/log/secure",
                    "pattern": [
                        "error: session_pty_req: session"
                    ]
                }
            ]
        },
        "selinux-config": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/selinux/config",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/selinux/config",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/selinux/config",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/selinux/config",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/selinux/config",
                    "file": "/etc/selinux/config",
                    "pattern": []
                }
            ]
        },
        "sestatus": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/sestatus_-b",
                    "command": "/usr/sbin/sestatus -b",
                    "pattern": []
                }
            ]
        },
        "ss": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/ss_-tulpn",
                    "command": "/usr/sbin/ss -tulpn",
                    "pattern": []
                }
            ]
        },
        "sshd_config": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/ssh/sshd_config",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ssh/sshd_config",
                    "pattern": [
                        "ALLOWUSERS",
                        "AllowUsers",
                        "Allowusers",
                        "CHALLENGERESPONSEAUTHENTICATION",
                        "CIPHERS",
                        "CLIENTALIVECOUNTMAX",
                        "CLIENTALIVEINTERVAL",
                        "ChallengeResponseAuthentication",
                        "Challengeresponseauthentication",
                        "Ciphers",
                        "ClientAliveCountMax",
                        "ClientAliveInterval",
                        "Clientalivecountmax",
                        "Clientaliveinterval",
                        "DENYUSERS",
                        "DenyUsers",
                        "Denyusers",
                        "KBDINTERACTIVEAUTHENTICATION",
                        "KbdInteractiveAuthentication",
                        "Kbdinteractiveauthentication",
                        "LOGINGRACETIME",
                        "LoginGraceTime",
                        "Logingracetime",
                        "MACS",
                        "MACs",
                        "MAXAUTHTRIES",
                        "MAXSTARTUPS",
                        "Macs",
                        "MaxAuthTries",
                        "MaxStartups",
                        "Maxauthtries",
                        "Maxstartups",
                        "PERMITEMPTYPASSWORDS",
                        "PERMITROOTLOGIN",
                        "PROTOCOL",
                        "PermitEmptyPasswords",
                        "PermitRootLogin",
                        "Permitemptypasswords",
                        "Permitrootlogin",
                        "Protocol",
                        "USEPAM",
                        "UsePAM",
                        "UsePam",
                        "Usepam",
                        "allowusers",
                        "challengeresponseauthentication",
                        "ciphers",
                        "clientalivecountmax",
                        "clientaliveinterval",
                        "denyusers",
                        "kbdinteractiveauthentication",
                        "logingracetime",
                        "macs",
                        "maxauthtries",
                        "maxstartups",
                        "permitemptypasswords",
                        "permitrootlogin",
                        "protocol",
                        "usepam"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/ssh/sshd_config",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/ssh/sshd_config",
                    "pattern": [
                        "ALLOWUSERS",
                        "AllowUsers",
                        "Allowusers",
                        "CHALLENGERESPONSEAUTHENTICATION",
                        "CIPHERS",
                        "CLIENTALIVECOUNTMAX",
                        "CLIENTALIVEINTERVAL",
                        "ChallengeResponseAuthentication",
                        "Challengeresponseauthentication",
                        "Ciphers",
                        "ClientAliveCountMax",
                        "ClientAliveInterval",
                        "Clientalivecountmax",
                        "Clientaliveinterval",
                        "DENYUSERS",
                        "DenyUsers",
                        "Denyusers",
                        "KBDINTERACTIVEAUTHENTICATION",
                        "KbdInteractiveAuthentication",
                        "Kbdinteractiveauthentication",
                        "LOGINGRACETIME",
                        "LoginGraceTime",
                        "Logingracetime",
                        "MACS",
                        "MACs",
                        "MAXAUTHTRIES",
                        "MAXSTARTUPS",
                        "Macs",
                        "MaxAuthTries",
                        "MaxStartups",
                        "Maxauthtries",
                        "Maxstartups",
                        "PERMITEMPTYPASSWORDS",
                        "PERMITROOTLOGIN",
                        "PROTOCOL",
                        "PermitEmptyPasswords",
                        "PermitRootLogin",
                        "Permitemptypasswords",
                        "Permitrootlogin",
                        "Protocol",
                        "USEPAM",
                        "UsePAM",
                        "UsePam",
                        "Usepam",
                        "allowusers",
                        "challengeresponseauthentication",
                        "ciphers",
                        "clientalivecountmax",
                        "clientaliveinterval",
                        "denyusers",
                        "kbdinteractiveauthentication",
                        "logingracetime",
                        "macs",
                        "maxauthtries",
                        "maxstartups",
                        "permitemptypasswords",
                        "permitrootlogin",
                        "protocol",
                        "usepam"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/ssh/sshd_config",
                    "file": "/etc/ssh/sshd_config",
                    "pattern": [
                        "ALLOWUSERS",
                        "AllowUsers",
                        "Allowusers",
                        "CHALLENGERESPONSEAUTHENTICATION",
                        "CIPHERS",
                        "CLIENTALIVECOUNTMAX",
                        "CLIENTALIVEINTERVAL",
                        "ChallengeResponseAuthentication",
                        "Challengeresponseauthentication",
                        "Ciphers",
                        "ClientAliveCountMax",
                        "ClientAliveInterval",
                        "Clientalivecountmax",
                        "Clientaliveinterval",
                        "DENYUSERS",
                        "DenyUsers",
                        "Denyusers",
                        "KBDINTERACTIVEAUTHENTICATION",
                        "KbdInteractiveAuthentication",
                        "Kbdinteractiveauthentication",
                        "LOGINGRACETIME",
                        "LoginGraceTime",
                        "Logingracetime",
                        "MACS",
                        "MACs",
                        "MAXAUTHTRIES",
                        "MAXSTARTUPS",
                        "Macs",
                        "MaxAuthTries",
                        "MaxStartups",
                        "Maxauthtries",
                        "Maxstartups",
                        "PERMITEMPTYPASSWORDS",
                        "PERMITROOTLOGIN",
                        "PROTOCOL",
                        "PermitEmptyPasswords",
                        "PermitRootLogin",
                        "Permitemptypasswords",
                        "Permitrootlogin",
                        "Protocol",
                        "USEPAM",
                        "UsePAM",
                        "UsePam",
                        "Usepam",
                        "allowusers",
                        "challengeresponseauthentication",
                        "ciphers",
                        "clientalivecountmax",
                        "clientaliveinterval",
                        "denyusers",
                        "kbdinteractiveauthentication",
                        "logingracetime",
                        "macs",
                        "maxauthtries",
                        "maxstartups",
                        "permitemptypasswords",
                        "permitrootlogin",
                        "protocol",
                        "usepam"
                    ]
                }
            ]
        },
        "sshd_config_perms": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.etc.ssh.sshd_config",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/etc/ssh/sshd_config",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.etc.ssh.sshd_config",
                    "command": "/bin/ls -l {CONTAINER_MOUNT_POINT}/etc/ssh/sshd_config",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/ls_-l_.etc.ssh.sshd_config",
                    "command": "/bin/ls -l /etc/ssh/sshd_config",
                    "pattern": []
                }
            ]
        },
        "sysconfig_ntpd": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysconfig/ntpd",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/ntpd",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysconfig/ntpd",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/ntpd",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysconfig/ntpd",
                    "file": "/etc/sysconfig/ntpd",
                    "pattern": []
                }
            ]
        },
        "sysctl": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/sysctl_-a",
                    "command": "/sbin/sysctl -a",
                    "pattern": []
                }
            ]
        },
        "sysctl.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysctl.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysctl.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysctl.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysctl.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysctl.conf",
                    "file": "/etc/sysctl.conf",
                    "pattern": []
                }
            ]
        },
        "sysctl.conf_initramfs": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/lsinitrd_.boot.initramfs-kdump.img_-f_.etc.sysctl.conf_.etc.sysctl.d._.conf",
                    "command": "/bin/lsinitrd /boot/initramfs-kdump.img -f /etc/sysctl.conf /etc/sysctl.d/*.conf",
                    "pattern": [],
                    "pre_command": "uname_r"
                }
            ]
        },
        "systemctl_cinder-volume": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_openstack-cinder-volume",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} show openstack-cinder-volume",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_openstack-cinder-volume",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} show openstack-cinder-volume",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_openstack-cinder-volume",
                    "command": "/bin/systemctl show openstack-cinder-volume",
                    "pattern": []
                }
            ]
        },
        "systemctl_list-unit-files": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-unit-files",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} list-unit-files",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-unit-files",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} list-unit-files",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-unit-files",
                    "command": "/bin/systemctl list-unit-files",
                    "pattern": []
                }
            ]
        },
        "systemctl_list-units": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-units",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} list-units",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-units",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} list-units",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/systemctl_list-units",
                    "command": "/bin/systemctl list-units",
                    "pattern": []
                }
            ]
        },
        "systemctl_mariadb": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_mariadb",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} show mariadb",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_mariadb",
                    "command": "/bin/systemctl --root={CONTAINER_MOUNT_POINT} show mariadb",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/systemctl_show_mariadb",
                    "command": "/bin/systemctl show mariadb",
                    "pattern": []
                }
            ]
        },
        "systemd_docker": {
            "docker_container": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/docker.service",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/system/docker.service",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/docker.service",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/system/docker.service",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/docker.service",
                    "file": "/usr/lib/systemd/system/docker.service",
                    "pattern": []
                }
            ]
        },
        "systemd_openshift_node": {
            "docker_container": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/atomic-openshift-node.service",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/system/atomic-openshift-node.service",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/atomic-openshift-node.service",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/system/atomic-openshift-node.service",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/usr/lib/systemd/system/atomic-openshift-node.service",
                    "file": "/usr/lib/systemd/system/atomic-openshift-node.service",
                    "pattern": []
                }
            ]
        },
        "systemd_system.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/systemd/system.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/system.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/systemd/system.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/systemd/system.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/systemd/system.conf",
                    "file": "/etc/systemd/system.conf",
                    "pattern": []
                }
            ]
        },
        "tuned-adm": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/tuned-adm_list",
                    "command": "/sbin/tuned-adm list",
                    "pattern": []
                }
            ]
        },
        "uname": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/uname_-a",
                    "command": "/bin/uname -a",
                    "pattern": []
                }
            ]
        },
        "up2date": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/sysconfig/rhn/up2date",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/rhn/up2date",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/sysconfig/rhn/up2date",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/sysconfig/rhn/up2date",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/sysconfig/rhn/up2date",
                    "file": "/etc/sysconfig/rhn/up2date",
                    "pattern": []
                }
            ]
        },
        "uptime": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/uptime",
                    "command": "/usr/bin/uptime",
                    "pattern": []
                }
            ]
        },
        "usr_journald.conf.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/usr/lib/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/usr/lib/systemd/journald\\.conf\\.d/()*.+\\.conf",
                    "pattern": []
                }
            ]
        },
        "vdsm.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vdsm/vdsm.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vdsm/vdsm.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.conf",
                    "file": "/etc/vdsm/vdsm.conf",
                    "pattern": []
                }
            ]
        },
        "vdsm.log": {
            "docker_container": [
                {
                    "archive_file_name": "/var/log/vdsm/vdsm.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/vdsm/vdsm.log",
                    "pattern": [
                        "(waitForMigrationDestinationPrepare)",
                        "16514': No route to host",
                        "ImageIsNotLegalChain: Image is not a legal chain:",
                        "ImagePathError: Image path does not exist or cannot be accessed/created:",
                        "Migration is stuck: Hasn't progressed in",
                        "The name org.fedoraproject.FirewallD1 was not provided by any .service files",
                        "Timeout while waiting for path preparation",
                        "Unable to obtain correct plug status or plug is not available"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/var/log/vdsm/vdsm.log",
                    "file": "{CONTAINER_MOUNT_POINT}/var/log/vdsm/vdsm.log",
                    "pattern": [
                        "(waitForMigrationDestinationPrepare)",
                        "16514': No route to host",
                        "ImageIsNotLegalChain: Image is not a legal chain:",
                        "ImagePathError: Image path does not exist or cannot be accessed/created:",
                        "Migration is stuck: Hasn't progressed in",
                        "The name org.fedoraproject.FirewallD1 was not provided by any .service files",
                        "Timeout while waiting for path preparation",
                        "Unable to obtain correct plug status or plug is not available"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/var/log/vdsm/vdsm.log",
                    "file": "/var/log/vdsm/vdsm.log",
                    "pattern": [
                        "(waitForMigrationDestinationPrepare)",
                        "16514': No route to host",
                        "ImageIsNotLegalChain: Image is not a legal chain:",
                        "ImagePathError: Image path does not exist or cannot be accessed/created:",
                        "Migration is stuck: Hasn't progressed in",
                        "The name org.fedoraproject.FirewallD1 was not provided by any .service files",
                        "Timeout while waiting for path preparation",
                        "Unable to obtain correct plug status or plug is not available"
                    ]
                }
            ]
        },
        "vdsm_id": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vdsm/vdsm.id",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.id",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vdsm/vdsm.id",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/vdsm/vdsm.id",
                    "file": "/etc/vdsm/vdsm.id",
                    "pattern": []
                }
            ]
        },
        "vgdisplay": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/vgdisplay_-vv",
                    "command": "/sbin/vgdisplay -vv",
                    "pattern": []
                }
            ]
        },
        "vgs_noheadings": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/vgs_--nameprefixes_--noheadings_--separator_-a_-o_vg_all_--config_global_locking_type_0",
                    "command": "/sbin/vgs --nameprefixes --noheadings --separator='|' -a -o vg_all --config=\"global{locking_type=0}\"",
                    "pattern": []
                }
            ]
        },
        "virt-what": {
            "host": [
                {
                    "archive_file_name": "/insights_commands/virt-what",
                    "command": "/usr/sbin/virt-what",
                    "pattern": []
                }
            ]
        },
        "vsftpd": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/pam.d/vsftpd",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/pam.d/vsftpd",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/pam.d/vsftpd",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/pam.d/vsftpd",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/pam.d/vsftpd",
                    "file": "/etc/pam.d/vsftpd",
                    "pattern": []
                }
            ]
        },
        "vsftpd.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/vsftpd/vsftpd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vsftpd/vsftpd.conf",
                    "pattern": [
                        "LOCAL_ENABLE",
                        "Local_Enable",
                        "SSL_ENABLE",
                        "SSL_SSLV3",
                        "Ssl_Enable",
                        "Ssl_Sslv3",
                        "local_enable",
                        "ssl_enable",
                        "ssl_sslv3"
                    ]
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/vsftpd/vsftpd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/vsftpd/vsftpd.conf",
                    "pattern": [
                        "LOCAL_ENABLE",
                        "Local_Enable",
                        "SSL_ENABLE",
                        "SSL_SSLV3",
                        "Ssl_Enable",
                        "Ssl_Sslv3",
                        "local_enable",
                        "ssl_enable",
                        "ssl_sslv3"
                    ]
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/vsftpd/vsftpd.conf",
                    "file": "/etc/vsftpd/vsftpd.conf",
                    "pattern": [
                        "LOCAL_ENABLE",
                        "Local_Enable",
                        "SSL_ENABLE",
                        "SSL_SSLV3",
                        "Ssl_Enable",
                        "Ssl_Sslv3",
                        "local_enable",
                        "ssl_enable",
                        "ssl_sslv3"
                    ]
                }
            ]
        },
        "woopsie": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/find_.var.crash_.var.tmp_-path_.reports-_.whoopsie-report",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/var/crash {CONTAINER_MOUNT_POINT}/var/tmp -path *.reports-*/whoopsie-report",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/find_.var.crash_.var.tmp_-path_.reports-_.whoopsie-report",
                    "command": "/usr/bin/find {CONTAINER_MOUNT_POINT}/var/crash {CONTAINER_MOUNT_POINT}/var/tmp -path *.reports-*/whoopsie-report",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/find_.var.crash_.var.tmp_-path_.reports-_.whoopsie-report",
                    "command": "/usr/bin/find /var/crash /var/tmp -path '*.reports-*/whoopsie-report'",
                    "pattern": []
                }
            ]
        },
        "xinetd.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/xinetd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/xinetd.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/xinetd.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/xinetd.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/xinetd.conf",
                    "file": "/etc/xinetd.conf",
                    "pattern": []
                }
            ]
        },
        "xinetd.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/xinetd\\.d/()*.*",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/xinetd\\.d/()*.*",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/xinetd\\.d/()*.*",
                    "pattern": []
                }
            ]
        },
        "yum-repolist": {
            "docker_container": [
                {
                    "archive_file_name": "/insights_commands/yum_-C_repolist",
                    "command": "/usr/bin/yum --installroot={CONTAINER_MOUNT_POINT} -C repolist",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/insights_commands/yum_-C_repolist",
                    "command": "/usr/bin/yum --installroot={CONTAINER_MOUNT_POINT} -C repolist",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/insights_commands/yum_-C_repolist",
                    "command": "/usr/bin/yum -C repolist",
                    "pattern": []
                }
            ]
        },
        "yum.conf": {
            "docker_container": [
                {
                    "archive_file_name": "/etc/yum.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum.conf",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/etc/yum.conf",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum.conf",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/etc/yum.conf",
                    "file": "/etc/yum.conf",
                    "pattern": []
                }
            ]
        },
        "yum.repos.d": {
            "docker_container": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum\\.repos\\.d/()*.*\\.repo",
                    "pattern": []
                }
            ],
            "docker_image": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "{CONTAINER_MOUNT_POINT}/etc/yum\\.repos\\.d/()*.*\\.repo",
                    "pattern": []
                }
            ],
            "host": [
                {
                    "archive_file_name": "/{EXPANDED_FILE_NAME}",
                    "file": "/etc/yum\\.repos\\.d/()*.*\\.repo",
                    "pattern": []
                }
            ]
        }
    },
    "version": "2017-08-31T17:10:37.456370"
}